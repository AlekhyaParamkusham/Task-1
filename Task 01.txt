Do a write up for the followings:? 

1. Difference between HTTP1.1 vs HTTP2 
When compared to the performance factor, HTTP2, response is very quick compared to HTTP1.1.
It is almost half the time taken for HTTP1.1 to load the webpage.

2. http version history 

The early HTTP version was HTTP/0.9 - One-line protocol
It was extremely simple with just a simple request of a single line consisting of a GET method followed by the path of the resource.
Only HTML files would be sent and no error codes or status in case of any issue could be sent. Instead another html file consisting of the error/status would be sent.

HTTP/1.0 
This had the functionality of displaying the version info along with the GET response.
Additionally unlike in HTTP/0.9, the status info is also displayed.
With the introduction of HTTP headers, instead of being able to send only html files, it was even possible to send other documents.

HTTP/1.1 - Standardized protocol
It allowed the connection to be reused.
Pipelining has been added, allowing to send a second request before the answer for the first one is fully transmitted, lowering the latency of the communication.
Additional cache control mechanisms have been introduced.

HTTP/2 - With greater performance.
It is a multiplexed protocol. Parallel requests can be handled over the same connection, removing the order and blocking constraints of the HTTP/1.x protocol.
It compresses headers. As these are often similar among a set of requests, this removes duplication and overhead of data transmitted.
It allows a server to populate data in a client cache, in advance of it being required, through a mechanism called the server push.


3. List 5 difference between Browser JS(console) vs Nodejs 
Javascript can only be run in the browsers. NodeJS code can be run outside the browser as well.
Javascript can run in any browser engine. Nodejs can only run in V8 engine of google chrome.
Javascript runtime environment that allows the javascript to be run on the server-side.NodeJS is a cross-platform and opensource.
Javascript is sandboxed for your safety, node. js has full access to the system like any other native application.
Javascript is a programming language that is used for writing scripts on the website. NodeJS is a Javascript runtime environment.
Javascript is basically used on the client-side. Node JS is mostly used on the server-side.
Javascript is capable enough to add HTML and play with the DOM. Nodejs does not have capability to add HTML tags.

4. what happens when you type a URL in the address bar in the browser?

 First, it checks the browser cache. The browser maintains a repository of DNS records for a fixed duration for websites you have previously visited. So, it is the first place to run a DNS query.
● Second, the browser checks the OS cache. If it is not in the browser cache, the browser will make a system call (i.e., gethostname on Windows) to your underlying computer OS to fetch the record since the OS also maintains a cache of DNS records.
● Third, it checks the router cache. If it’s not on your computer, the browser will communicate with the router that maintains its’ own cache of DNS records.
● Fourth, it checks the ISP cache. If all steps fail, the browser will move on to the ISP. Your ISP maintains its’ own DNS server, which includes a cache of DNS records, which the browser would check with the last hope of finding your requested URL.
If the search is successful, it will provide us with the web page.

If the search is not successful, then the address would be converted in a number.

The browser initiates a TCP connection with the server.
Once the browser receives the correct IP address, it will build a connection with the server that matches the IP address to transfer information. Browsers use internet protocols to build such connections. There are several different internet protocols that can be used, but TCP is the most common protocol used for many types of HTTP requests.
To transfer data packets between your computer(client) and the server, it is important to have a TCP connection established. This connection is established using a process called the TCP/IP three-way handshake. This is a three-step process where the client and the server exchange SYN(synchronize) and ACK(acknowledge) messages to establish a connection.
1. The client machine sends a SYN packet to the server over the internet, asking if it is open for new connections.
2. If the server has open ports that can accept and initiate new connections, it’ll respond with an ACKnowledgment of the SYN packet using a SYN/ACK packet.
3. The client will receive the SYN/ACK packet from the server and will acknowledge it by sending an ACK packet.
Then a TCP connection is established for data transmission!

The browser sends an HTTP request to the webserver.
Once the TCP connection is established, it is time to start transferring data!

The server handles the request and sends back a response.
The server contains a webserver (i.e., Apache, IIS) that receives the request from the browser and passes it to a request handler to read and generate a response. The request handler is a program (written in ASP.NET, PHP, Ruby, etc.) that reads the request, its’ headers, and cookies to check what is being requested and also update the information on the server if needed. Then it will assemble a response in a particular format (JSON, XML, HTML).

The server sends out an HTTP response.
The server response contains the web page you requested as well as the status code, compression type (Content-Encoding), how to cache the page (Cache-Control), any cookies to set, privacy information, etc.

The browser displays the HTML content (for HTML responses, which is the most common).
The browser displays the HTML content in phases. First, it will render the bare bone HTML skeleton. Then it will check the HTML tags and send out GET requests for additional elements on the web page, such as images, CSS stylesheets, JavaScript files, etc. These static files are cached by the browser, so it doesn’t have to fetch them again the next time you visit the page. In the end, you’ll see maps.google.com appearing on your browser.



